# ===============================
# Recursion Assignment Solutions (Python)
# ===============================

#--------------------------------
#1. Print N to 1 without loop
#--------------------------------
def printNto1(n):
    if n == 0: return
    print(n)
    printNto1(n-1)

#--------------------------------
#2. Sum of digits using recursion
#--------------------------------
def sumDigits(n):
    n = abs(n)
    if n < 10: return n
    return n % 10 + sumDigits(n // 10)

#--------------------------------
#3. Factorial using recursion
#--------------------------------
def factorial(n):
    if n <= 1: return 1
    return n * factorial(n-1)

#--------------------------------
#4. Fibonacci series
#--------------------------------
def fibonacci(n):
    if n <= 0: return []
    if n == 1: return [0]
    seq = [0, 1]
    for _ in range(2, n):
        seq.append(seq[-1] + seq[-2])
    return seq

#--------------------------------
#5. Tower of Hanoi
#--------------------------------
def towerOfHanoi(n, src='A', aux='B', dst='C', moves=None):
    if moves is None: moves = []
    if n == 1:
        moves.append(f"Move 1 from {src} to {dst}")
        return moves
    towerOfHanoi(n-1, src, dst, aux, moves)
    moves.append(f"Move {n} from {src} to {dst}")
    towerOfHanoi(n-1, aux, src, dst, moves)
    return moves

#--------------------------------
#6. Palindrome check using recursion
#--------------------------------
def isPalindrome(s, i=0, j=None):
    if j is None: j = len(s)-1
    if i >= j: return True
    if s[i] != s[j]: return False
    return isPalindrome(s, i+1, j-1)

#--------------------------------
#7. GCD of two numbers
#--------------------------------
def gcd(a, b):
    a, b = abs(a), abs(b)
    if b == 0: return a
    return gcd(b, a % b)

#--------------------------------
#8. Power of number
#--------------------------------
def power(x, n):
    if n == 0: return 1
    half = power(x, n//2)
    return half*half if n%2==0 else half*half*x

#--------------------------------
#9. Count substrings with exactly K distinct characters
#--------------------------------
from collections import defaultdict
def atMostK(s, k):
    freq = defaultdict(int); left = 0; res = 0; distinct = 0
    for right, ch in enumerate(s):
        if freq[ch] == 0: distinct += 1
        freq[ch] += 1
        while distinct > k:
            freq[s[left]] -= 1
            if freq[s[left]] == 0: distinct -= 1
            left += 1
        res += right - left + 1
    return res
def exactlyKDistinct(s, k):
    return atMostK(s, k) - atMostK(s, k-1)

#--------------------------------
#10. Hackerrank: Recursive digit sum
#--------------------------------
def superDigit(n_str, k):
    total = sum(int(c) for c in n_str) * k
    while total > 9:
        total = sum(int(d) for d in str(total))
    return total
